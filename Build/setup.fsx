#r "paket:
nuget Fake.Core.Environment >= 5.18.2
nuget Fake.Core.Process >= 5.18.2
nuget Fake.DotNet.Cli >= 5.18.2
nuget Fake.DotNet.NuGet >= 5.18.2
nuget Fake.IO.FileSystem >= 5.18.2 //"

open System
open System.IO
open Fake.DotNet
open Fake.DotNet.NuGet.Restore
open Fake.IO
open Microsoft.Win32

// Really bootstrap
let dotnetPath = "dotnet" |> Fake.Core.ProcessUtils.tryFindFileOnPath

let dotnetOptions (o : DotNet.Options) =
  match dotnetPath with
  | Some f -> { o with DotNetCliPath = f }
  | None -> o

DotNet.restore (fun o ->
  { o with
      Packages = [ "./packages" ]
      Common = dotnetOptions o.Common }) "./Build/dotnet-cli.csproj"

let build = """// generated by dotnet fake run .\Build\setup.fsx
#r "paket:
nuget Fake.Core.Target >= 5.18.2
nuget Fake.Core.Environment >= 5.18.2
nuget Fake.Core.Process >= 5.18.2
nuget Fake.DotNet.AssemblyInfoFile >= 5.18.2
nuget Fake.DotNet.Cli >= 5.18.2
nuget Fake.DotNet.MSBuild >= 5.18.2
nuget Fake.IO.FileSystem >= 5.18.2
nuget FSharpLint.Core >= 0.10
nuget Markdown >= 2.2.1
nuget YamlDotNet >= 8.0.0 //"
#r "System.IO.Compression.FileSystem.dll"
#r "System.Xml"
#r "System.Xml.Linq"
#load "actions.fsx"
#load "targets.fsx"
#nowarn "988"

do ()"""

File.WriteAllText("./Build/build.fsx", build)